from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import db
from misc import dp
from keyboards import keyboards
from handlers.questions_of_kp import DataPoll, DataPrices


# class DataPrices(StatesGroup):
#     installation_cost_of_1_IP_camera = State()  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ 1 IP –∫–∞–º–µ—Ä—ã, –±–µ–∑ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª—è
#     installation_cost_of_1_meter = State()  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ 1 –º–µ—Ç—Ä–∞ –∫–∞–±–µ–ª—è –≤ –≥–æ—Ñ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä—É–±–µ
#     meters_of_cable = State()  # —Å–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–æ–≤ –∫–∞–±–µ–ª—è –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞–¥–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤ –ö–ü –Ω–∞ 1 IP –∫–∞–º–µ—Ä—É
#     cost_of_mount_kit = State()  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞ (—Å—Ç—è–∂–∫–∏, –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞, –∏–∑–æ–ª–µ–Ω—Ç–∞, –∫–ª–∏–ø—Å—ã) –¥–ª—è 1 IP –∫–∞–º–µ—Ä—ã
#     start_up_cost = State()  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—É—Å–∫–æ-–Ω–∞–ª–∞–¥–æ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç


@dp.message_handler(text='‚öí –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç', state='*')
async def start_change_cost(message: types.Message):
    columns = ', '.join(['cost_1_cam', 'cost_1_m', 'cnt_m', 'cost_mounting', 'start_up_cost'])
    info = db.get_info(columns, 'cost_work', message.from_user.id, 'id_tg')
    if info:
        text = f'–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n–ú–æ–Ω—Ç–∞–∂ 1 –∫–∞–º–µ—Ä—ã, —Ä—É–±: {info[0]}\n–ú–æ–Ω—Ç–∞–∂ 1 –º–µ—Ç—Ä–∞, —Ä—É–±: {info[1]}\n' \
               f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–æ–≤ –Ω–∞ 1 –∫–∞–º–µ—Ä—É: {info[2]}\n–°—Ç–æ–∏–º—Ç–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞, —Ä—É–±: {info[3]}\n' \
               f'–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞, —Ä—É–±: {info[4]}'
        await message.answer(text)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ')
    await message.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ 1 IP –∫–∞–º–µ—Ä—ã, –±–µ–∑ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª—è',
                         reply_markup=keyboards.key_cancel)
    await DataPrices.first()


@dp.message_handler(state=DataPrices.installation_cost_of_1_IP_camera)
async def step_1(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(text='–í—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        return
    await state.update_data(installation_1_cam=message.text)
    await message.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ 1 –º–µ—Ç—Ä–∞ –∫–∞–±–µ–ª—è –≤ –≥–æ—Ñ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä—É–±–µ')
    await DataPrices.next()


@dp.message_handler(state=DataPrices.installation_cost_of_1_meter)
async def step_2(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer(text='–í—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        return
    await state.update_data(installation_cable=message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–æ–≤ –∫–∞–±–µ–ª—è –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞–¥–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤ –ö–ü –Ω–∞ 1 IP –∫–∞–º–µ—Ä—É')
    await DataPrices.next()


@dp.message_handler(state=DataPrices.meters_of_cable)
async def step_3(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–í—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        return
    await state.update_data(meters_cable=message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞ (—Å—Ç—è–∂–∫–∏, –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞, –∏–∑–æ–ª–µ–Ω—Ç–∞, –∫–ª–∏–ø—Å—ã) –¥–ª—è 1 IP '
                         '–∫–∞–º–µ—Ä—ã')
    await DataPrices.next()


@dp.message_handler(state=DataPrices.cost_of_mount_kit)
async def step_4(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–í—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        return
    await state.update_data(cost_mount_kit=message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—É—Å–∫–æ-–Ω–∞–ª–∞–¥–æ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç(–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä—ã –∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ '
                         '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ, —é—Å—Ç–∏—Ä–æ–≤–∫–∞) 1 IP –∫–∞–º–µ—Ä—ã')
    await DataPrices.next()


@dp.message_handler(state=DataPrices.start_up_cost)
async def step_5(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–í—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å')
        return
    await state.update_data(start_up_cost=message.text)
    await message.answer('–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –∏ –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –µ—ë –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å–µ—Ö –ö–ü.\n\n–ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å '
                         '—Ä–∞–±–æ—Ç –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é: üéõ <b>–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</b>', parse_mode='HTML')
    await message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboards.menu_video)
    # await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã', reply_markup=keyboards.select_system)
    # await DataPoll.system.set()
    data = await state.get_data()
    db.delete_cost_work(message.from_user.id)
    db.insert_cost(data, message.from_user.id)
    await state.finish()
