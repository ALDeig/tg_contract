from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ContentTypes

import config
import db
from keyboards import keyboards
from misc import dp


@dp.message_handler(text='–û—Ö—Ä–∞–Ω–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è', state='type_system')
async def step_1(msg: Message, state: FSMContext):
    await msg.answer(
        text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ö—Ä–∞–Ω–Ω–æ–π —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ Ajax)',
        reply_markup=keyboards.key_cancel)
    await msg.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –î–∞—Ç—á–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è')
    await state.set_state('cost_signaling')


@dp.message_handler(state='cost_signaling')
async def step_2(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        await state.update_data(motion_sensor=msg.text)
        await msg.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –î–∞—Ç—á–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è')
        await state.set_state('cost_signaling_step_3')
    else:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å')


@dp.message_handler(state='cost_signaling_step_3')
async def step_3(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        await state.update_data(open_sensor=msg.text)
        await msg.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –î–∞—Ç—á–∏–∫–∞ –¥—ã–º–∞')
        await state.set_state('cost_signaling_step_4')
    else:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å')


@dp.message_handler(state='cost_signaling_step_4')
async def step_4(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        await state.update_data(smoke_detector=msg.text)
        await msg.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –î–∞—Ç—á–∏–∫–∞ –ø—Ä–æ—Ç–µ—á–∫–∏')
        await state.set_state('cost_signaling_step_5')
    else:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å')


@dp.message_handler(state='cost_signaling_step_5')
async def step_5(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        await state.update_data(leakage_sensor=msg.text)
        await msg.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –°–∏—Ä–µ–Ω—ã')
        await state.set_state('cost_signaling_step_6')
    else:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å')


@dp.message_handler(state='cost_signaling_step_6')
async def step_6(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        await state.update_data(siren=msg.text)
        await msg.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
        await state.set_state('cost_signaling_step_7')
    else:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å')


@dp.message_handler(state='cost_signaling_step_7')
async def step_7(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        await state.update_data(control_keyboard=msg.text)
        await msg.answer(text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞  –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –£–º–Ω–æ–π —Ä–æ–∑–µ—Ç–∫–∏')
        await state.set_state('cost_signaling_step_8')
    else:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å')


@dp.message_handler(state='cost_signaling_step_8')
async def step_8(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        await state.update_data(smart_plug=msg.text)
        await msg.answer(
            text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞  –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –°–∏–ª–æ–≤–æ–≥–æ —Ä–µ–ª–µ')
        await state.set_state('cost_signaling_step_9')
    else:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å')


@dp.message_handler(state='cost_signaling_step_9')
async def step_9(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        await state.update_data(power_relay=msg.text)
        await msg.answer(
            text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞  –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –°–ª–∞–±–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–ª–µ')
        await state.set_state('cost_signaling_step_10')
    else:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å')


@dp.message_handler(state='cost_signaling_step_10')
async def step_9(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        await state.update_data(low_current_relay=msg.text)
        await msg.answer(
            text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞  –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –•–∞–±–∞')
        await state.set_state('cost_signaling_step_11')
    else:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å')


@dp.message_handler(state='cost_signaling_step_11')
async def step_10(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        await state.update_data({
            'hub': msg.text,
            'id_tg': msg.from_user.id
        })
        data = await state.get_data()
        columns = tuple(data.keys())
        db.insert('cost_signaling', columns, data)
        await msg.answer('–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –∏ –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –µ—ë –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å–µ—Ö –ö–ü.\n\n–ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å '
                         '—Ä–∞–±–æ—Ç –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é: üéõ <b>–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</b>', parse_mode='HTML')
        await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboards.menu)
        await state.finish()
    else:
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å')


