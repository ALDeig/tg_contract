import os

import asyncio
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message, InputFile, ReplyKeyboardRemove

import analytics
import db
from keyboards import keyboards
from commercial_proposal import calculate_kp, create_doc
# from handlers.get_cost_of_work import DataPrices
from misc import dp


class DataPoll(StatesGroup):
    system = State()
    total_numb_of_cam = State()  # total_cams
    indoor_cameras = State()  # cams_on_indoor
    cams_on_street = State()  # cams_on_street
    type_cams_in_room = State()  # type_cam_on_street
    type_cams_on_street = State()  # type_cam_in_room
    days_for_archive = State()  # days_for_archive
    answer_total_price = State()
    answer_of_sale = State()


class DataPrices(StatesGroup):
    installation_cost_of_1_IP_camera = State()  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ 1 IP –∫–∞–º–µ—Ä—ã, –±–µ–∑ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª—è
    installation_cost_of_1_meter = State()  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ 1 –º–µ—Ç—Ä–∞ –∫–∞–±–µ–ª—è –≤ –≥–æ—Ñ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä—É–±–µ
    meters_of_cable = State()  # —Å–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–æ–≤ –∫–∞–±–µ–ª—è –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞–¥–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤ –ö–ü –Ω–∞ 1 IP –∫–∞–º–µ—Ä—É
    cost_of_mount_kit = State()  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞ (—Å—Ç—è–∂–∫–∏, –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞, –∏–∑–æ–ª–µ–Ω—Ç–∞, –∫–ª–∏–ø—Å—ã) –¥–ª—è 1 IP –∫–∞–º–µ—Ä—ã
    start_up_cost = State()  # —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—É—Å–∫–æ-–Ω–∞–ª–∞–¥–æ—á–Ω—ã—Ö —Ä–∞–±–æ—Ç


def generate_choice_cam(id_tg, view_cam, purpose, type_cam):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä—ã —Ç–∏–ø–∞ –∫–∞–º–µ—Ä—ã. –ö–∞–∫–∞—è –∫–∞–º–µ—Ä–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –ö–ü"""
    camera = db.get_model_camera_of_user(view_cam, purpose, id_tg)
    if not camera:
        details_camera = db.get_price_of_camera(type_cam=type_cam, view_cam=view_cam, purpose=purpose, ppi='2')
    else:
        details_camera = db.get_price_of_camera(camera[0])  # 'model', 'description', 'specifications', 'price', 'ppi', 'box', 'image', 'brand'
        if not details_camera:
            details_camera = db.get_price_of_camera(type_cam=type_cam, view_cam=view_cam, purpose=purpose, ppi='2')

    return details_camera


# @dp.message_handler(text='üí∞ –°–æ–∑–¥–∞—Ç—å –ö–ü')
# async def start_poll(message: Message):
#     if db.check_user_in(id_tg=message.from_user.id, column='id_tg', table='cost_work'):  # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
#         keyboard = keyboards.create_keyboard_kp('type_cam', 'data_cameras')
#         await message.answer('–ö–∞–∫–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–µ—Ä –Ω–∞–¥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?', reply_markup=keyboards.key_cancel)
#         await DataPoll.first()
#         return
#     await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ 1 IP –∫–∞–º–µ—Ä—ã, –±–µ–∑ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª—è',
#                          reply_markup=keyboards.key_cancel)
#     await DataPrices.first()

@dp.message_handler(text='üí∞ –°–æ–∑–¥–∞—Ç—å –ö–ü')
async def start_poll(message: Message):
    if db.check_user_in(id_tg=message.from_user.id, column='id_tg',
                        table='cost_work'):  # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã', reply_markup=keyboards.select_system)
        await DataPoll.first()
        return
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ 1 IP –∫–∞–º–µ—Ä—ã, –±–µ–∑ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª—è',
                         reply_markup=keyboards.key_cancel)
    await DataPrices.first()


@dp.message_handler(text='IP', state=DataPoll.system)
async def step_0(message: Message, state: FSMContext):
    # await state.update_data(type_cam='IP')
    await message.answer('–ö–∞–∫–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–µ—Ä –Ω–∞–¥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?', reply_markup=keyboards.key_cancel_to_video)
    await DataPoll.next()


@dp.message_handler(state=DataPoll.total_numb_of_cam)
async def step_1(message: Message, state: FSMContext):
    if not message.text.isdigit() or message.text == '0':
        await message.answer('–í—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –°–∫–æ–ª—å–∫–æ –∫–∞–º–µ—Ä –Ω–∞–¥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?',
                             reply_markup=keyboards.key_cancel_to_video)
        return
    await state.update_data(total_cams=message.text)
    await DataPoll.next()
    await message.answer('–°–∫–æ–ª—å–∫–æ –∫–∞–º–µ—Ä –±—É–¥–µ—Ç –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏?', reply_markup=keyboards.key_cancel_to_video)


@dp.message_handler(state=DataPoll.indoor_cameras)
async def step_2(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–í—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –°–∫–æ–ª—å–∫–æ –∫–∞–º–µ—Ä –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏?')
        return
    async with state.proxy() as data:
        total_cams = data['total_cams']
        if int(total_cams) < int(message.text):
            await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –°–∫–æ–ª—å–∫–æ –∫–∞–º–µ—Ä –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏?')
            return
        data['cams_on_indoor'] = message.text
        data['cams_on_street'] = str(int(total_cams) - int(message.text))
    if message.text == total_cams:
        await message.answer('–í—Å–µ –∫–∞–º–µ—Ä—ã –±—É–¥—É—Ç –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è')
        await message.answer(text='–ö–∞–∫–æ–π —Ç–∏–ø –∫–∞–º–µ—Ä –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏? –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–Ω–∞—Ç.',
                             reply_markup=keyboards.create_keyboard_kp(
                                 'view_cam',
                                 'data_cameras',
                                 {'type_cam': 'IP', 'purpose': '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ'})[0])
        await DataPoll.type_cams_in_room.set()
    elif message.text == '0':
        await message.answer('–í—Å–µ –∫–∞–º–µ—Ä—ã –±—É–¥—É—Ç —É–ª–∏—á–Ω—ã–µ')
        await state.update_data(type_cam_in_room=None)
        await message.answer(text='–ö–∞–∫–æ–π —Ç–∏–ø –∫–∞–º–µ—Ä –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —É–ª–∏—Ü–µ?',
                             reply_markup=keyboards.create_keyboard_kp('view_cam', 'data_cameras',
                                                                       {'type_cam': 'IP', 'purpose': '–£–ª–∏—á–Ω—ã–µ'})[0])
        await DataPoll.type_cams_on_street.set()
    else:
        await message.answer(f'–í –ø–æ–º–µ—â–µ–Ω–∏–∏ - {message.text}\n–ù–∞ —É–ª–∏—Ü–µ - {int(total_cams) - int(message.text)}')
        await message.answer(text='–ö–∞–∫–æ–π —Ç–∏–ø –∫–∞–º–µ—Ä –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏? –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–Ω–∞—Ç.',
                             reply_markup=keyboards.create_keyboard_kp('view_cam', 'data_cameras',
                                                                       {'type_cam': 'IP', 'purpose': '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ'})[0])
        await DataPoll.type_cams_in_room.set()


@dp.message_handler(state=DataPoll.type_cams_in_room)
async def step_4(message: Message, state: FSMContext):
    await state.update_data(type_cam_in_room=message.text)
    details_camera = generate_choice_cam(message.from_user.id, message.text[2:], '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ', 'IP')
    name = details_camera[0].strip().replace('/', '').replace('\\', '')
    # type_file = details_camera[-3].split('.')[-1]
    try:
        file = InputFile(
            os.path.join('commercial_proposal', 'images', 'camera', details_camera[-1], name + '.jpg'))
        # print('Brand camera in ', details_camera[-1])
        await message.answer_photo(photo=file, caption=f'–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–º–µ—Ä–∞:\n'
                                                       f'{details_camera[0]}, {details_camera[1]}\n'
                                                       f'–¶–µ–Ω–∞: {details_camera[3]} —Ä—É–±.')
    except FileNotFoundError:
        await message.answer(text=f'–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–º–µ—Ä–∞:\n'
                                  f'{details_camera[0]}, {details_camera[1]}\n'
                                  f'–¶–µ–Ω–∞: {details_camera[3]} —Ä—É–±.')
    await state.update_data(data_cam_in=details_camera)
    async with state.proxy() as data:
        if data['cams_on_indoor'] == data['total_cams']:
            data['type_cam_on_street'] = None
            await message.answer('–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ö–∏–≤ —Å –∫–∞–º–µ—Ä –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è?',
                                 reply_markup=keyboards.key_cancel_to_video)
            await DataPoll.days_for_archive.set()
            return
    await message.answer(text='–ö–∞–∫–æ–π —Ç–∏–ø –∫–∞–º–µ—Ä –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —É–ª–∏—Ü–µ?',
                         reply_markup=keyboards.create_keyboard_kp('view_cam', 'data_cameras',
                                                                   {'type_cam': 'IP', 'purpose': '–£–ª–∏—á–Ω—ã–µ'})[0])
    await DataPoll.next()


@dp.message_handler(state=DataPoll.type_cams_on_street)
async def step_5(message: Message, state: FSMContext):
    camera = generate_choice_cam(message.from_user.id, message.text[2:], '–£–ª–∏—á–Ω—ã–µ',
                                 'IP')  # 'model', 'description', 'specifications', 'price', 'ppi', 'image', 'box', 'brand'
    name = camera[0].strip().replace('/', '').replace('\\', '')
    # type_file = camera[-3].split('.')[-1]
    try:
        file = InputFile(os.path.join('commercial_proposal', 'images', 'camera', camera[-1], name + '.jpg'))
        await message.answer_photo(photo=file, caption=f'–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–º–µ—Ä–∞:\n'
                                                       f'{camera[0]}, {camera[1]}\n'
                                                       f'–¶–µ–Ω–∞: {camera[3]} —Ä—É–±.')
    except FileNotFoundError:
        await message.answer(text=f'–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–º–µ—Ä–∞:\n'
                                  f'{camera[0]}, {camera[1]}\n'
                                  f'–¶–µ–Ω–∞: {camera[3]} —Ä—É–±.')
    await state.update_data(type_cam_on_street=message.text)
    await state.update_data(data_cam_out=camera)
    await message.answer('–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ö–∏–≤ —Å –∫–∞–º–µ—Ä –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è?',
                         reply_markup=keyboards.key_cancel_to_video)
    await DataPoll.next()


@dp.message_handler(state=DataPoll.days_for_archive)
async def step_6(message: Message, state: FSMContext):
    if not message.text.isdigit() or message.text == '0':
        await message.answer('–í—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∞—Ä—Ö–∏–≤. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π?',
                             reply_markup=keyboards.key_cancel_to_video)
        return
    await state.update_data(days_for_archive=message.text)
    data = await state.get_data()
    # if int(data['total_cams']) >= 16 and int(message.text) > 18:
    #     await message.answer(f'–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –∞—Ä—Ö–∏–≤ '
    #                          f'18 –¥–Ω. –£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ö–∏–≤.', reply_markup=keyboards.key_cancel)
    #     return
    table_data = calculate_kp.calculate_result(data=data, id_tg=message.from_user.id)
    if not table_data[0]:
        # await message.answer(f'–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –∞—Ä—Ö–∏–≤ '
        #                      f'{table_data[1]} –¥–Ω. –£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ö–∏–≤.',
        #                      reply_markup=keyboards.key_cancel)
        await message.answer(
            f'–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤ {int(table_data[1])} –¥–Ω.',
            reply_markup=keyboards.key_cancel_to_video)
        return
    file_name, number_kp = create_doc.save_kp(table_data[0], table_data[1]['total'], message.from_user.id)

    await state.finish()
    await message.answer(text=f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å - {table_data[1]["total"]:.2f}‚ÇΩ\n'
                              f'–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è - {table_data[1]["equipment"]:.2f}‚ÇΩ\n'
                              f'–°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - {table_data[1]["materials"]:.2f}‚ÇΩ\n'
                              f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã - {table_data[1]["work"]:.2f}‚ÇΩ', reply_markup=ReplyKeyboardRemove())
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –Ω–∞—á–∞–ª —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ö–ü')
    await asyncio.sleep(10)
    file = InputFile(file_name)
    await message.answer_document(file)
    await message.answer(text='–ö–ü –≥–æ—Ç–æ–≤, —á—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup=keyboards.menu)
    analytics.insert_data('kp')
    db.write_number_kp(message.from_user.id, number_kp=int(number_kp) + 1)
    await asyncio.sleep(5)
    os.remove(file_name)
