import os

import asyncio
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, InputFile, ReplyKeyboardRemove

import analytics
import db
from commercial_proposal import calculate_kp, create_doc
from keyboards import keyboards
from keyboards.inline_keybords import inline_yes_or_no
from misc import dp
from states.questions_kp import DataPoll, DataPrices


def generate_choice_cam(id_tg, view_cam, purpose, type_cam):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä—ã —Ç–∏–ø–∞ –∫–∞–º–µ—Ä—ã. –ö–∞–∫–∞—è –∫–∞–º–µ—Ä–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –ö–ü"""
    camera = db.get_model_camera_of_user(view_cam, purpose, id_tg)
    if not camera:
        details_camera = db.get_price_of_camera(type_cam=type_cam, view_cam=view_cam, purpose=purpose)
    else:
        details_camera = db.get_price_of_camera(
            camera[0])  # 'model', 'description', 'specifications', 'price', 'ppi', 'box', 'image', 'brand'
        if not details_camera:
            details_camera = db.get_price_of_camera(type_cam=type_cam, view_cam=view_cam, purpose=purpose)

    return details_camera


# @dp.message_handler(text='üí∞ –°–æ–∑–¥–∞—Ç—å –ö–ü')
# async def start_poll(message: Message):
#     if db.check_user_in(id_tg=message.from_user.id, column='id_tg', table='cost_work'):  # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
#         keyboard = keyboards.create_keyboard_kp('type_cam', 'data_cameras')
#         await message.answer('–ö–∞–∫–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–µ—Ä –Ω–∞–¥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?', reply_markup=keyboards.key_cancel)
#         await DataPoll.first()
#         return
#     await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ 1 IP –∫–∞–º–µ—Ä—ã, –±–µ–∑ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª—è',
#                          reply_markup=keyboards.key_cancel)
#     await DataPrices.first()

@dp.message_handler(text='üí∞ –°–æ–∑–¥–∞—Ç—å –ö–ü')
async def start_poll(message: Message):
    # if db.check_user_in(id_tg=message.from_user.id, column='id_tg',
    #                     table='cost_work'):  # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã', reply_markup=keyboards.select_system)
    await DataPoll.first()
    # return
    # await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ 1 IP –∫–∞–º–µ—Ä—ã, –±–µ–∑ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª—è',
    #                      reply_markup=keyboards.key_cancel)
    # await DataPrices.first()


@dp.message_handler(text='IP', state=DataPoll.system)
async def step_0(message: Message, state: FSMContext):
    if db.check_user_in(id_tg=message.from_user.id, column='id_tg',
                        table='cost_work'):  # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        await message.answer('–ö–∞–∫–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–µ—Ä –Ω–∞–¥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?',
                             reply_markup=keyboards.key_cancel_to_video)
        await DataPoll.next()
        return
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ 1 IP –∫–∞–º–µ—Ä—ã, –±–µ–∑ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª—è',
                         reply_markup=keyboards.key_cancel)
    await DataPrices.first()
    # return
    # await state.update_data(type_cam='IP')
    # await message.answer('–ö–∞–∫–æ–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–µ—Ä –Ω–∞–¥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?', reply_markup=keyboards.key_cancel_to_video)
    # await DataPoll.next()


@dp.message_handler(state=DataPoll.total_numb_of_cam)
async def step_1(message: Message, state: FSMContext):
    if not message.text.isdigit() or message.text == '0':
        await message.answer('–í—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –°–∫–æ–ª—å–∫–æ –∫–∞–º–µ—Ä –Ω–∞–¥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?',
                             reply_markup=keyboards.key_cancel_to_video)
        return
    await state.update_data(total_cams=message.text)
    await DataPoll.next()
    await message.answer('–°–∫–æ–ª—å–∫–æ –∫–∞–º–µ—Ä –±—É–¥–µ—Ç –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏?', reply_markup=keyboards.key_cancel_to_video)


@dp.message_handler(state=DataPoll.indoor_cameras)
async def step_2(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–í—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –°–∫–æ–ª—å–∫–æ –∫–∞–º–µ—Ä –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏?')
        return
    async with state.proxy() as data:
        total_cams = data['total_cams']
        if int(total_cams) < int(message.text):
            await message.answer('–í—ã –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –°–∫–æ–ª—å–∫–æ –∫–∞–º–µ—Ä –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏?')
            return
        data['cams_on_indoor'] = message.text
        data['cams_on_street'] = str(int(total_cams) - int(message.text))
    if message.text == total_cams:
        await message.answer('–í—Å–µ –∫–∞–º–µ—Ä—ã –±—É–¥—É—Ç –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è')
        await message.answer(text='–ö–∞–∫–æ–π —Ç–∏–ø –∫–∞–º–µ—Ä –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏? –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–Ω–∞—Ç.',
                             reply_markup=keyboards.create_keyboard_kp(
                                 'view_cam',
                                 'data_cameras',
                                 {'type_cam': 'IP', 'purpose': '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ'})[0])
        await DataPoll.type_cams_in_room.set()
    elif message.text == '0':
        await message.answer('–í—Å–µ –∫–∞–º–µ—Ä—ã –±—É–¥—É—Ç —É–ª–∏—á–Ω—ã–µ')
        await state.update_data(type_cam_in_room=None)
        await message.answer(text='–ö–∞–∫–æ–π —Ç–∏–ø –∫–∞–º–µ—Ä –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —É–ª–∏—Ü–µ?',
                             reply_markup=keyboards.create_keyboard_kp('view_cam', 'data_cameras',
                                                                       {'type_cam': 'IP', 'purpose': '–£–ª–∏—á–Ω—ã–µ'})[0])
        await DataPoll.type_cams_on_street.set()
    else:
        await message.answer(f'–í –ø–æ–º–µ—â–µ–Ω–∏–∏ - {message.text}\n–ù–∞ —É–ª–∏—Ü–µ - {int(total_cams) - int(message.text)}')
        await message.answer(text='–ö–∞–∫–æ–π —Ç–∏–ø –∫–∞–º–µ—Ä –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏? –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–Ω–∞—Ç.',
                             reply_markup=keyboards.create_keyboard_kp('view_cam', 'data_cameras',
                                                                       {'type_cam': 'IP', 'purpose': '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ'})[0])
        await DataPoll.type_cams_in_room.set()


@dp.message_handler(state=DataPoll.type_cams_in_room)
async def step_4(message: Message, state: FSMContext):
    await state.update_data(type_cam_in_room=message.text)
    details_camera = generate_choice_cam(message.from_user.id, message.text[2:], '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ', 'IP')
    name = details_camera[0].strip().replace('/', '').replace('\\', '')
    # type_file = details_camera[-3].split('.')[-1]
    try:
        file = InputFile(
            os.path.join('commercial_proposal', 'images', 'camera', details_camera[-1], name + '.jpg'))
        # print('Brand camera in ', details_camera[-1])
        await message.answer_photo(photo=file, caption=f'–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–º–µ—Ä–∞:\n'
                                                       f'{details_camera[0]}, {details_camera[1]}\n'
                                                       f'–¶–µ–Ω–∞: {details_camera[3]} —Ä—É–±.')
    except FileNotFoundError:
        await message.answer(text=f'–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–º–µ—Ä–∞:\n'
                                  f'{details_camera[0]}, {details_camera[1]}\n'
                                  f'–¶–µ–Ω–∞: {details_camera[3]} —Ä—É–±.')
    await state.update_data(data_cam_in=details_camera)
    async with state.proxy() as data:
        if data['cams_on_indoor'] == data['total_cams']:
            data['type_cam_on_street'] = None
            await message.answer('–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ö–∏–≤ —Å –∫–∞–º–µ—Ä –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è?',
                                 reply_markup=keyboards.archive)
            await DataPoll.days_for_archive.set()
            return
    await message.answer(text='–ö–∞–∫–æ–π —Ç–∏–ø –∫–∞–º–µ—Ä –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —É–ª–∏—Ü–µ?',
                         reply_markup=keyboards.create_keyboard_kp('view_cam', 'data_cameras',
                                                                   {'type_cam': 'IP', 'purpose': '–£–ª–∏—á–Ω—ã–µ'})[0])
    await DataPoll.next()


@dp.message_handler(state=DataPoll.type_cams_on_street)
async def step_5(message: Message, state: FSMContext):
    camera = generate_choice_cam(message.from_user.id, message.text[2:], '–£–ª–∏—á–Ω—ã–µ',
                                 'IP')  # 'model', 'description', 'specifications', 'price', 'ppi', 'image', 'box', 'brand'
    name = camera[0].strip().replace('/', '').replace('\\', '')
    # type_file = camera[-3].split('.')[-1]
    try:
        file = InputFile(os.path.join('commercial_proposal', 'images', 'camera', camera[-1], name + '.jpg'))
        await message.answer_photo(photo=file, caption=f'–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–º–µ—Ä–∞:\n'
                                                       f'{camera[0]}, {camera[1]}\n'
                                                       f'–¶–µ–Ω–∞: {camera[3]} —Ä—É–±.')
    except FileNotFoundError:
        await message.answer(text=f'–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–º–µ—Ä–∞:\n'
                                  f'{camera[0]}, {camera[1]}\n'
                                  f'–¶–µ–Ω–∞: {camera[3]} —Ä—É–±.')
    await state.update_data(type_cam_on_street=message.text)
    await state.update_data(data_cam_out=camera)
    await message.answer('–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å –∞—Ä—Ö–∏–≤ —Å –∫–∞–º–µ—Ä –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è?',
                         reply_markup=keyboards.archive)
    await DataPoll.next()


@dp.message_handler(state=DataPoll.days_for_archive)
async def step_6(message: Message, state: FSMContext):
    if not message.text.isdigit() or message.text == '0':
        await message.answer('–í—ã –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª–∏ –∞—Ä—Ö–∏–≤. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π?',
                             reply_markup=keyboards.archive)
        return
    await state.update_data(days_for_archive=message.text)
    data = await state.get_data()
    table_data = calculate_kp.calculate_result(data=data, id_tg=message.from_user.id)
    if not table_data[0]:
        await message.answer(
            f'–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤ {int(table_data[1])} –¥–Ω.',
            reply_markup=keyboards.archive)
        return
    file_name, number_kp = create_doc.save_kp(table_data[0], table_data[1]['total'], message.from_user.id)

    # await state.finish()
    await message.answer(text=f'üí∞<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å - {table_data[1]["total"]:.2f}‚ÇΩ</b>\n\n'
                              f'1Ô∏è‚É£–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è - {table_data[1]["equipment"]:.2f}‚ÇΩ\n'
                              f'2Ô∏è‚É£–°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - {table_data[1]["materials"]:.2f}‚ÇΩ\n'
                              f'3Ô∏è‚É£–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã - {table_data[1]["work"]:.2f}‚ÇΩ',
                         parse_mode='HTML',
                         reply_markup=ReplyKeyboardRemove())
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –Ω–∞—á–∞–ª —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ö–ü')
    await asyncio.sleep(10)
    file = InputFile(file_name)
    await message.answer(text='–ö–ü –≥–æ—Ç–æ–≤', reply_markup=keyboards.go_menu)
    await message.answer_document(document=file)
    text = """
üì¶ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º –∏–∑ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –ö–ü, —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–æ–≤–æ–µ \
–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∑–∞–∫—É–ø–∫—É. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ªüëá\n
üõ° –û–±—Ä–∞—â–∞–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç –∏ —Ü–µ–Ω–∞ \
–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ –ö–ü –Ω–µ —Ä–∞–∑–≥–ª–∞—à–∞—é—Ç—Å—è.
"""
    await message.answer(text=text, reply_markup=inline_yes_or_no)
    old_tpl = db.get_kp_tpl(message.from_user.id)
    if not old_tpl:
        await message.answer(text='–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π —à–∞–±–ª–æ–Ω –ö–ü:  https://clck.ru/S8SjN.', disable_web_page_preview=True)
    # await message.answer(text='–ö–ü –≥–æ—Ç–æ–≤, —á—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup=keyboards.menu)
    # await message.answer(text='–ö–ü –≥–æ—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?',
    #                      reply_markup=keyboards.yes_or_no)
    await state.update_data({'file': file_name, 'to_provider': table_data[-1]})
    # await DataPoll.send_kp.set()
    await state.set_state('send_kp')
    analytics.insert_data('kp')
    db.write_number_kp(message.from_user.id, number_kp=int(number_kp) + 1)
    # await state.finish()
    # return
    # send_message('You won 1 mln $', file_name, 'alkin.denis@gmail.com', 'Test email')
    await asyncio.sleep(5)
    os.remove(file_name)


# @dp.callback_query_handler(actions.filter(), state=DataPoll.send_kp)
# async def send_kp_to_provider(call: CallbackQuery, callback_data: dict, state: FSMContext):
#     await call.answer(cache_time=30)
#     answer = callback_data.get('make')
#     if answer == 'No':
#         await state.finish()
#         await call.message.answer('–ì–æ—Ç–æ–≤–æ', reply_markup=keyboards.menu)
#         return
#     data = await state.get_data()
#     user = db.get_data('name, phone, city, number_order', 'users', {'id_tg': ('=', call.from_user.id)})[0]
#     number_order = f'{user.phone[-4:]}-{user.number_order + 1}'
#     keyboard = keyboard_for_provider(call.from_user.id, number_order)
#     text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {call.from_user.full_name}\n' \
#            f'–ì–æ—Ä–æ–¥: {user.city}\n' \
#            f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {number_order}\n\n' \
#            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.–í–Ω–∏–º–∞–Ω–∏–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω.' \
#            f'–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤–≤–µ–¥–∏—Ç–µ: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–∞–∫–∞–∑" –∏ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ' \
#            f'–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n–ü–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É"' \
#            f'–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ö–æ–º–∞–Ω–¥–∞ Rommo'
#     file_name = create_doc.save_table_to_provider(data['to_provider'], number_order, call.from_user.id)
#     # file = InputFile(file_name)
#     # send_message(text, file_name, 'alkin.denis@gmail.com', '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç RommoBot')
#     providers = db.get_data('id_tg', 'users', {'is_provider': ('=', True), 'city': ('=', user.city)})
#     if not providers:
#         providers = db.get_data('id_tg', 'users', {'is_provider': ('=', True)})
#         if not providers:
#             await call.message.answer('–ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç')
#             return
#     cnt = True
#     for provider in providers:
#         try:
#             if cnt:
#                 file = InputFile(file_name)
#                 send = await dp.bot.send_document(chat_id=provider.id_tg, caption=text, document=file,
#                                                   reply_markup=keyboard)
#                 file_id = send.document.file_id
#                 cnt = False
#             else:
#                 await dp.bot.send_document(chat_id=provider.id_tg, caption=text, document=file_id,
#                                            reply_markup=keyboard)
#         except BotBlocked:
#             pass
#     # await dp.bot.send_document(chat_id=config.ADMIN_ID[0], caption=text, document=file, reply_markup=keyboard)
#     answer = f"""
# üì¶ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{number_order} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º.\n
# ‚ùóÔ∏è–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–æ–¥–∞—é—Ç—Å—è –∫—Ä–∞—Ç–Ω–æ —É–ø–∞–∫–æ–≤–∫–µ.\n
# üß© –î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 30 –º–∏–Ω.
# """
#     await call.message.answer(text=answer, reply_markup=keyboards.menu)
#     db.update_data('users', call.from_user.id, {'number_order': user.number_order + 1})
#     analytics.insert_data('send_order')
#     await state.finish()
#     await asyncio.sleep(5)
#     os.remove(file_name)

# @dp.callback_query_handler(state=DataPoll.send_kp)
# async def send_kp_to_provider(call: CallbackQuery, state: FSMContext, callback_data: dict):
#     data = await state.get_data()
#     if message.text == '–î–∞':
#         user = db.get_data('name, phone, city, number_order', 'users', {'id_tg': ('=', message.from_user.id)})[0]
#         text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}, ID: {message.from_user.id}\n' \
#                f'–ò–º—è –≤ –±–∞–∑–µ: {user.name}\n' \
#                f'–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n' \
#                f'–ì–æ—Ä–æ–¥: {user.city}\n\n' \
#                f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.–í–Ω–∏–º–∞–Ω–∏–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω.' \
#                f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∏ —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª–µ.\n' \
#                f'–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ö–æ–º–∞–Ω–¥–∞ Rommo'
#         number_order = f'{user.phone[-4:]}-{user.number_order + 1}'
#         file_name = create_doc.save_table_to_provider(data['to_provider'], number_order, message.from_user.id)
#         file = InputFile(file_name)
#         await message.answer(f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{number_order} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω. '
#                              '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–æ–¥–∞—é—Ç—Å—è –∫—Ä–∞—Ç–Ω–æ —É–ø–∞–∫–æ–≤–∫–µ. '
#                              '–ï—Å–ª–∏ –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç –¥–æ–ª—å—à–µ 30 –º–∏–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äú@RommoSupport‚Äù –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.',
#                              reply_markup=keyboards.menu)
#         # send_message(text, file_name, 'alkin.denis@gmail.com', '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç RommoBot')
#         await dp.bot.send_document(chat_id=config.ADMIN_ID[0], caption=text, document=file)
#         db.update_data('users', message.from_user.id, {'number_order': user.number_order + 1})
#         await asyncio.sleep(5)
#         os.remove(file_name)
#     else:
#         await message.answer('–ì–æ—Ç–æ–≤–æ!', reply_markup=keyboards.menu)
#     await state.finish()
