from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import analytics
import config
from misc import dp
import db
from keyboards import keyboards
import work_with_api


class DataRegistrationUser(StatesGroup):
    name = State()
    country = State()
    city = State()
    phone = State()
    is_provider = State()
    answer = State()


class DataRegistrationExecutor(StatesGroup):
    inn = State()  # –ò–ù–ù
    form_of_taxation = State()  # –§–æ—Ä–º–∞ –Ω–∞–ª–æ–≥–æ–æ–±–ª–∞–∂–µ–Ω–∏—è
    bik = State()  # –ë–ò–ö –ë–∞–Ω–∫–∞
    checking_account = State()  # –†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç
    warranty_period = State()  # –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—ã –≤ –º–µ—Å
    contract_number = State()  # –ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–Ω–µ—Ç—Å—è –æ—Ç—Å—á–µ—Ç
    answer = State()


@dp.message_handler(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', state='*')
@dp.message_handler(text='üë®‚Äçüîß –ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ', state='*')
async def start_registration(message: types.Message):
    info = db.get_info('name, country, city, phone, is_provider', 'users', message.from_user.id, 'id_tg')
    # info = db.get_info('name, city, phone', 'users', message.from_user.id, 'id_tg')
    if info:
        text = f'–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n'\
               f'–ò–º—è: {info[0]}\n' \
               f'–°—Ç—Ä–∞–Ω–∞: {info[1]}\n' \
               f'–ì–æ—Ä–æ–¥: {info[2]}\n'\
               f'–¢–µ–ª–µ—Ñ–æ–Ω: {info[3]}\n' \
               f'–ü–æ—Å—Ç–∞–≤—â–∏–∫: {"–î–∞" if info[4] == True else "–ù–µ—Ç"}'
        await message.answer(text)
    await message.answer('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?', reply_markup=keyboards.key_cancel)
    await DataRegistrationUser.name.set()


@dp.message_handler(state=DataRegistrationUser.name)
async def reg_step_1(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.capitalize())
    await DataRegistrationUser.next()
    await message.answer('–ò–∑ –∫–∞–∫–æ–π —Ç—ã —Å—Ç—Ä–∞–Ω—ã?', reply_markup=keyboards.country)


@dp.message_handler(state=DataRegistrationUser.country)
async def reg_step_1_1(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text.capitalize())
    await DataRegistrationUser.next()
    await message.answer('–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?', reply_markup=keyboards.key_cancel)


@dp.message_handler(state=DataRegistrationUser.city)
async def reg_step_2(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text.capitalize())
    await DataRegistrationUser.next()
    await message.answer('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, —Å–∫–æ–±–æ–∫ –∏ —Ç–∏—Ä–µ, –Ω–∞—á–Ω–∏ —Å 7)',
                         reply_markup=keyboards.phone_key)


@dp.message_handler(state=DataRegistrationUser.phone, content_types=types.ContentTypes.CONTACT)
async def reg_step_3(message: types.Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone.replace('+', ''))
    # user_data = await state.get_data()
    await DataRegistrationUser.next()
    await message.answer(text='–Ø–≤–ª—è–µ—Ç–µ—Å—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è?\n\n'
                              '–ï—Å–ª–∏ –≤—ã –æ—Ç–≤–µ—Ç–∏—Ç–µ –î–∞, —Ç–æ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.',
                         reply_markup=keyboards.yes_or_no)
    # await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ:\n"
    #                      f"–ò–º—è: {user_data['name']}\n"
    #                      f"–ì–æ—Ä–æ–¥: {user_data['city']}\n"
    #                      f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
    #                      f"–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=keyboards.yes_or_no)


@dp.message_handler(state=DataRegistrationUser.phone, content_types=types.ContentTypes.TEXT)
async def reg_step_3_1(message: types.Message, state: FSMContext):
    if not message.text[1:].isdigit() or len(message.text) != 11:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä')
        return
    await state.update_data(phone=message.text)
    # user_data = await state.get_data()
    await DataRegistrationUser.next()
    await message.answer(text='–ó–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–±—è –∫–∞–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞?', reply_markup=keyboards.yes_or_no)
    # await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ:\n"
    #                      f"–ò–º—è: {user_data['name']}\n"
    #                      f"–ì–æ—Ä–æ–¥: {user_data['city']}\n"
    #                      f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
    #                      f"–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=keyboards.yes_or_no)


@dp.message_handler(state=DataRegistrationUser.is_provider)
async def reg_step_4(message: types.Message, state: FSMContext):
    if message.text not in ('–î–∞', '–ù–µ—Ç'):
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç')
        return
    user_data = await state.get_data()
    await DataRegistrationUser.next()
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ:\n"
                         f"–ò–º—è: {user_data['name']}\n"
                         f"–°—Ç—Ä–∞–Ω–∞: {user_data['country']}\n"
                         f"–ì–æ—Ä–æ–¥: {user_data['city']}\n"
                         f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}\n"
                         f"–ü–æ—Å—Ç–∞–≤—â–∏–∫: {message.text}\n"
                         f"–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=keyboards.yes_or_no)
    await state.update_data(is_provider=True if message.text == '–î–∞' else False)


# file_id = 'BQACAgIAAxkDAAJ8DmBkxoLca-NgVSbstbAT1o8RUJSOAAKUCgACQngoS91oUfeG9YxzHgQ'


@dp.message_handler(state=DataRegistrationUser.answer)
async def reg_step_4(message: types.Message, state: FSMContext):
    if message.text == '–î–∞':
        if db.check_user_in(message.from_user.id, 'id_tg', 'users'):
            type_executor = db.get_type_executor(id_tg=message.from_user.id)
            number_kp = db.get_number_kp(id_tg=message.from_user.id)
            number_order = db.get_data('number_order', 'users', {'id_tg': ('=', message.from_user.id)})[0].number_order
        else:
            type_executor = None
            number_kp = 1
            number_order = 0
        db.delete_user(message.from_user.id)
        user_data = await state.get_data()
        user_data.update({'id_tg': message.from_user.id, 'number_kp': number_kp})
        columns = ('name', 'country', 'city', 'phone', 'is_provider', 'id_tg', 'number_kp')
        # columns = ('name', 'city', 'phone', 'id_tg', 'number_kp')
        db.insert('users', columns, user_data)
        db.update_data('users', message.from_user.id, {'number_order': number_order})
        if type_executor:
            db.update_type_executor(type_executor=type_executor, id_tg=message.from_user.id)
        if user_data.get('is_provider'):
            # file = types.InputFile('documents/template_table.xlsx')
            await message.answer_document(document=config.FILE_ID,
                                          caption='–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–æ—Ä–æ—É–¥–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
        await state.finish()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboards.menu)
    else:
        await state.finish()
        await message.answer('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?', reply_markup=keyboards.key_cancel)
        await DataRegistrationUser.name.set()


def get_info(table: str, id_tg: int, type_executor: str) -> str or bool:
    if type_executor == '–ò–ü':
        columns = ', '.join(['name_ip', 'inn', 'ogrn', 'address', 'bik', 'name_bank', 'warranty'])
    else:
        columns = ', '.join(['name_org', 'inn', 'ogrn', 'address', 'bik', 'name_bank', 'warranty'])

    info = db.get_info(columns, table, id_tg, 'user_id_tg')
    if not info:
        return False
    text = f'–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {info[0]}\n–ò–ù–ù: {info[1]}\n–û–ì–†–ù: {info[2]}\n–ê–¥—Ä–µ—Å: {info[3]}\n' \
           f'–ë–ò–ö: {info[4]}\n–ë–∞–Ω–∫: {info[5]}\n–ì–∞—Ä–∞–Ω—Ç–∏—è: {info[6]}'
    return text


@dp.message_handler(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', state='*')
@dp.message_handler(text='üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', state='*')
async def start_registration_executor(message: types.Message):
    if message.text == 'üè¢ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è':
        type_executor = db.get_type_executor(message.from_user.id)
        table = 'executor_ip' if type_executor == '–ò–ü' else 'executor_ooo'
        info = get_info(table, message.from_user.id, type_executor)
        if info:
            await message.answer(info)
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ')
    await message.answer('–í–≤–µ–¥–∏ –ò–ù–ù –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', reply_markup=keyboards.key_cancel)
    await DataRegistrationExecutor.inn.set()


@dp.message_handler(state=DataRegistrationExecutor.inn)
async def reg_step_1(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù')
        return

    api_inn = work_with_api.parse_answer_inn(message.text)
    if not api_inn:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ò–ù–ù. –£–∫–∞–∂–∏ –≤–µ—Ä–Ω—ã–π')
        return
    analytics.insert_data('request_inn')
    await state.update_data(inn=message.text)
    await state.update_data(api_inn=api_inn)
    await DataRegistrationExecutor.next()
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text='–ë–µ–∑ –ù–î–°', callback_data='usi'),
                 types.InlineKeyboardButton(text='–° –ù–î–° 20%', callback_data='osno'))
    await message.answer('–†–∞–±–æ—Ç–∞–µ—à—å —Å –ù–î–°?', reply_markup=keyboard)


@dp.callback_query_handler(state=DataRegistrationExecutor.form_of_taxation)
async def reg_step2(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'usi':
        await state.update_data(form='—É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è')
    else:
        await state.update_data(form='–æ–±—â—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è')
    await DataRegistrationExecutor.next()
    await callback_query.message.edit_reply_markup()
    await callback_query.message.answer(text='–í–≤–µ–¥–∏ –ë–ò–ö –±–∞–Ω–∫–∞')


@dp.message_handler(state=DataRegistrationExecutor.bik)
async def reg_step_6(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ë–ò–ö')
        return

    api_bik = work_with_api.parse_answer_bik(message.text)
    analytics.insert_data('request_bik')
    if not api_bik:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ë–ò–ö. –£–∫–∞–∂–∏ –≤–µ—Ä–Ω—ã–π')
        return

    await state.update_data(bik=message.text)
    await state.update_data(api_bik=api_bik)
    await DataRegistrationExecutor.next()
    await message.answer('–í–µ—Ä–Ω–æ —É–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ä–∞—Å—á—ë—Ç–Ω–æ–≥–æ —Å—á—ë—Ç–∞')


@dp.message_handler(state=DataRegistrationExecutor.checking_account)
async def reg_step_7(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or len(message.text) != 20:
        await message.answer('–í–∏–¥–∏–º–æ –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å –∏ –≤–≤–µ–¥–∏ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.')
        return

    await state.update_data(check_account=message.text)
    await DataRegistrationExecutor.next()
    await message.answer('–ö–∞–∫—É—é –≥–∞—Ä–∞–Ω—Ç–∏—é –≤ –º–µ—Å—è—Ü–∞—Ö –Ω–∞ —Ä–∞–±–æ—Ç—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –≤ –¥–æ–≥–æ–≤–æ—Ä–µ?')


@dp.message_handler(state=DataRegistrationExecutor.warranty_period)
async def reg_step_8(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        return
    await state.update_data(warranty=message.text)
    await DataRegistrationExecutor.next()
    await message.answer('–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞). –¢–µ–±–µ –Ω–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç '
                         '–≤–≤–æ–¥–∏—Ç—å –µ–≥–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑, —è –±—É–¥—É –ø—Ä–∏–±–∞–≤–ª—è—Ç—å –∫ –Ω–æ–≤–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É –µ–¥–∏–Ω–∏—Ü—É')


@dp.message_handler(state=DataRegistrationExecutor.contract_number)
async def reg_step_9(message: types.Message, state: FSMContext):
    if not message.text[-1].isdigit():
        await message.answer('–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è —Ü–∏—Ñ—Ä–æ–π')
        return

    await state.update_data(number=message.text)
    executor_data = await state.get_data()
    answer_api_inn = executor_data['api_inn']
    answer_api_bik = executor_data['api_bik']
    await DataRegistrationExecutor.next()
    if executor_data['form'][0] == '—É':
        form = '–ë–µ–∑ –ù–î–°'
    else:
        form = '–° –ù–î–° 20%'
    await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                         f"–ò–ù–ù: {executor_data['inn']}\n"
                         f"{answer_api_inn[0]['name_ip']}\n"
                         f"{form}\n"
                         f"–ë–ò–ö: {executor_data['bik']}\n"
                         f"–ë–∞–Ω–∫: {answer_api_bik['name_bank']}\n"
                         f"–†–∞—Å—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç: {executor_data['check_account']}\n"
                         f"–ö–æ—Ä—Ä–µ—Å–ø–æ–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç: {answer_api_bik['number_account']}\n"
                         f"–ì–∞—Ä–∞–Ω—Ç–∏—è: {executor_data['warranty']}\n"
                         f"–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: {executor_data['number']}\n"
                         f"–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=keyboards.yes_or_no)


@dp.message_handler(state=DataRegistrationExecutor.answer)
async def reg_step_10(message: types.Message, state: FSMContext):
    if message.text == '–î–∞':
        db.delete(message.from_user.id)
        data = await state.get_data()
        if data['api_inn'][1] == '–Æ–õ':
            db.update_type_executor(type_executor='–Æ–õ', id_tg=message.from_user.id)
            columns = ('name_org', 'initials', 'position_in_org', 'ogrn', 'kpp', 'address', 'name_bank',
                       'number_account', 'inn', 'form', 'bik', 'check_acc', 'warranty', 'number_contract', 'user_id_tg')
            data = db.create_data_to_db(data=data)
            data.update({'user_id_tg': message.from_user.id})
            db.insert('executor_ooo', columns, data=data)
        else:
            db.update_type_executor(type_executor='–ò–ü', id_tg=message.from_user.id)
            columns = ('name_ip', 'ogrn', 'type_ip', 'code_region', 'address', 'name_bank', 'cor_account', 'inn',
                       'form', 'bik', 'check_acc', 'warranty', 'number_contract', 'user_id_tg')
            data = db.create_data_to_db(data=data)
            data.update({'user_id_tg': message.from_user.id})
            db.insert('executor_ip', columns, data)
        await state.finish()
        await message.answer(text='–í–æ—Ç –∏ –≤—Å—ë, —è –∑–∞–ø–æ–º–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –ï—Å–ª–∏ –Ω–∞–¥–æ –±—É–¥–µ—Ç –∏—Ö –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '
                                  '‚Äú–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è‚Äù. –ê —Å–µ–π—á–∞—Å –¥–∞–≤–∞–π —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ–≥–æ–≤–æ—Ä, –≤—ã–±–µ—Ä–∏ '
                                  '–∫–∞–∫–æ–π.', reply_markup=keyboards.menu)
    else:
        await state.finish()
        await message.answer('–í–≤–µ–¥–∏ –ò–ù–ù –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', reply_markup=keyboards.key_cancel)
        await DataRegistrationExecutor.inn.set()
