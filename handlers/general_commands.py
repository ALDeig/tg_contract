import os

import asyncio
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import BotBlocked

import analytics
import config
import db
from misc import dp, bot
import keyboards
from work_with_api import get_limit_api_inn, get_limit_api_bik

start_message = """ –û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–µ–±–µ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∏—Å—Ç–µ–º—ã –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é \
—Ñ–∏—Ä–º—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–ø–æ–¥–≥–æ—Ç–æ–≤—å –ò–ù–ù, –ë–ò–ö –±–∞–Ω–∫–∞ –∏ –Ω–æ–º–µ—Ä —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ —Å—á—ë—Ç–∞). –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ —è –±—É–¥—É —Ö—Ä–∞–Ω–∏—Ç—å, –≤–≤–æ–¥–∏—Ç—å –∏—Ö –∫–∞–∂–¥—ã–π \
—Ä–∞–∑ –Ω–µ –Ω–∞–¥–æ, –Ω–æ —É —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ \
—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –¥–æ–≥–æ–≤–æ—Ä–∞, –æ—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —Ç–≤–æ–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ–¥–≥–æ—Ç–æ–≤—å –ò–ù–ù, –ë–ò–ö –±–∞–Ω–∫–∞ –∏ –Ω–æ–º–µ—Ä —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ —Å—á—ë—Ç–∞) –∏ \
–¥—Ä—É–≥–∏–µ –¥–µ—Ç–∞–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–∞. –°–∞–º –¥–æ–≥–æ–≤–æ—Ä –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –Ω–∞—à–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ, –µ–≥–æ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –ø–æ—á—Ç—É –Ω–∞ –ø–æ–¥–ø–∏—Å—å \
–∏–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. 
<b>–ü–æ–µ—Ö–∞–ª–∏!</b>
"""


class Document(StatesGroup):
    text_documents = State()
    tpl = State()
    del_rev = State()
    num_rev = State()


class CreateKP(StatesGroup):
    start = State()


class MessageFromUsers(StatesGroup):
    message = State()


@dp.message_handler(text='‚Ü©Ô∏è–û—Ç–º–µ–Ω–∞', state='*')
@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç"""
    await state.finish()
    if not db.check_user_in(message.from_user.id, 'id_tg', 'users'):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ.
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
        await message.answer(text=start_message, parse_mode='HTML', reply_markup=keyboard)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboards.menu)


@dp.message_handler(commands='get_analytics', user_id=config.ADMIN_ID)
async def cmd_get_analytics(message: types.Message):
    data = analytics.get_analytics()
    count_users = db.get_count_users()
    count_executors = db.get_count_executors()

    await message.answer(f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {count_users}\n"
                         f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:</b> {count_executors}\n"
                         f"<b>–î–æ–≥–æ–≤–æ—Ä–æ–≤:</b> {data['contract']}\n"
                         f"<b>–®–∞–±–ª–æ–Ω—ã –ö–ü</b> {data['template']}\n"
                         f"<b>–ö–ü:</b> {data['kp']}\n"
                         f"<b>–ò–ù–ù:</b> {data['request_inn']}\n"
                         f"<b>–ë–ò–ö:</b> {data['request_bik']}", parse_mode='HTML')


@dp.message_handler(commands='get_reviews', user_id=config.ADMIN_ID)
async def send_all_reviews(message: types.Message):
    reviews = db.get_reviews_with_id()
    text = '–û—Ç–∑—ã–≤—ã: \n'
    for review in reviews:
        text += f'{review[0]}. {review[1]}\n'

    await Document.del_rev.set()
    await message.answer(text, reply_markup=keyboards.del_review)


@dp.message_handler(Command('get_limit'), user_id=config.ADMIN_ID)
async def send_limits(message: types.Message):
    inn = get_limit_api_inn()
    bik = get_limit_api_bik()
    if not inn or not bik:
        await message.answer('–û—à–∏–±–∫–∞')
        return
    await message.answer(f'–ò–ù–ù:\n'
                         f'–õ–∏–º–∏—Ç: {inn[0]}\n'
                         f'–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {inn[1]}\n'
                         f'–û—Å—Ç–∞–ª–æ—Å—å: {inn[2]}\n'
                         f'–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {inn[3]}')
    await message.answer(f'–ë–ò–ö:\n'
                         f'–õ–∏–º–∏—Ç: {bik[0]}\n'
                         f'–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {bik[1]}\n'
                         f'–û—Å—Ç–∞–ª–æ—Å—å: {bik[2]}\n'
                         f'–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {inn[3]}')


@dp.message_handler(text='–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤', user_id=config.ADMIN_ID, state=Document.del_rev)
async def del_review(message: types.Message, state: FSMContext):
    await Document.num_rev.set()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–∑—ã–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ')


@dp.message_handler(user_id=config.ADMIN_ID, state=Document.num_rev)
async def get_num_review(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä')
    db.del_review(message.text)
    await state.finish()
    await message.answer('–û—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω')


@dp.message_handler(commands='document', user_id=config.ADMIN_ID)
async def create_text_for_document(message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç', reply_markup=keyboards.key_cancel)
    await Document.first()


@dp.message_handler(state=Document.text_documents, user_id=config.ADMIN_ID)
async def get_text_for_documents(message: types.Message, state: FSMContext):
    with open(os.path.join('db', 'document.txt'), 'w', encoding='UTF-8') as file:
        file.write(message.text)
    await message.answer('–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∞–Ω')
    await state.finish()


@dp.message_handler(text='üóÉ –î–æ–∫—É–º–µ–Ω—Ç—ã')
async def send_documents(message: types.Message):
    try:
        with open(os.path.join('db', 'document.txt'), 'r', encoding='UTF-8') as file:
            text = file.read()
    except FileNotFoundError:
        await message.answer('–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç', reply_markup=keyboards.key_cancel)
        return
    await message.answer(text)


@dp.message_handler(text='üé• –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ')
async def send_menu_video(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboards.menu_video)


@dp.message_handler(text='üí∞ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')  # , state=CreateKP.start
async def create_kp(message: types.Message, state: FSMContext):
    await message.answer(text='–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboards.menu_kp)
    # await state.finish()


@dp.message_handler(text='üéõ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', state='*')
async def change_data(message: types.Message):
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboards.choice_menu)


@dp.message_handler(text='üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω –ö–ü', state='*')
async def add_tpl_kp(message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞', reply_markup=keyboards.key_cancel)
    await Document.tpl.set()


@dp.message_handler(content_types=types.ContentTypes.DOCUMENT, state=Document.tpl)
async def download_file(message: types.Message, state: FSMContext):
    name_file = await message.document.download()
    old_tpl = db.get_kp_tpl(message.from_user.id)
    if old_tpl is not None:
        os.remove(old_tpl)
    db.insert_kp_tpl(name_file.name, message.from_user.id)
    await state.finish()
    await message.answer('–®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω')
    analytics.insert_data('template')


@dp.message_handler(Command('send_message'), user_id=config.ADMIN_ID, state='*')
async def send_message_all_users(message: types.Message):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=keyboards.key_cancel)
    await MessageFromUsers.message.set()


@dp.message_handler(user_id=config.ADMIN_ID, state=MessageFromUsers.message)
async def send_message_all_users_2(message: types.Message, state: FSMContext):
    users = db.get_users()
    for user in users:
        try:
            await bot.send_message(chat_id=user[0], text=message.text)
        except BotBlocked:
            pass
