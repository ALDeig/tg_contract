import asyncio
import os

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import analytics
import db
from keyboards import keyboards
import work_with_api
from create_contract import filling_contract
from misc import dp


class FillingContract(StatesGroup):  # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    inn = State()  # –ò–ù–ù
    address = State()  # –∞–¥—Ä–µ—Å
    price = State()  # —Ü–µ–Ω–∞
    prepaid_expense = State()  # –∞–≤–∞–Ω—Å
    period = State()  # –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    bik = State()  # –ë–ò–ö –ë–∞–Ω–∫–∞
    current_account = State()  # –†–∞—Å—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    answer = State()
    api_inn_ = State()
    api_bik_ = State()


@dp.message_handler(text='üìë –î–æ–≥–æ–≤–æ—Ä –Ω–∞ –º–æ–Ω—Ç–∞–∂ –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è', state='*')
async def start_create_contract(message: types.Message, state: FSMContext):
    if not db.check_user_in(message.from_user.id, 'user_id_tg', 'executor_ip') \
            and not db.check_user_in(message.from_user.id, 'user_id_tg', 'executor_ooo'):  # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏—Å–ø
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')
        keyboard.add('‚Ü©Ô∏è–û—Ç–º–µ–Ω–∞')
        await message.answer('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', reply_markup=keyboard)
        await state.finish()
        return
    await state.finish()
    await FillingContract.inn.set()
    await message.answer('–í–≤–µ–¥–∏ –ò–ù–ù –∫–ª–∏–µ–Ω—Ç–∞', reply_markup=keyboards.key_cancel)


@dp.message_handler(state=FillingContract.inn)
async def filling_step_1(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù. –ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä')
        return
    data_from_api = work_with_api.parse_answer_inn(message.text)
    analytics.insert_data('request_inn')
    if not data_from_api:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ò–ù–ù. –£–∫–∞–∂–∏ –≤–µ—Ä–Ω—ã–π')
        return
    await state.update_data({'inn': message.text, 'api_inn': data_from_api})
    if data_from_api[1] == '–ò–ü':
        await state.update_data(name_file='ip')
    else:
        await state.update_data(name_file='ooo')
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(types.InlineKeyboardButton(text='–î–∞', callback_data=f'yes {message.text}'),
                 types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no'))
    await message.answer(f"–ú–æ–Ω—Ç–∞–∂ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É: {data_from_api[0]['address']}?", reply_markup=keyboard)


@dp.callback_query_handler(state=FillingContract.inn)
async def proof_of_address(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data[0] == 'y':
        inn = callback_query.data.split()[-1]
        await state.update_data(address=work_with_api.parse_answer_inn(inn)[0]['address'])
        await FillingContract.price.set()
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer('–£–∫–∞–∂–∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ –≤ –¥–æ–≥–æ–≤–æ—Ä–µ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)')
    else:
        await FillingContract.next()
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer('–ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–æ–Ω—Ç–∞–∂')


@dp.message_handler(state=FillingContract.address)
async def filling_step_2(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await FillingContract.next()
    await message.answer('–£–∫–∞–∂–∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–Ω—Ç–∞–∂–∞ –≤ –¥–æ–≥–æ–≤–æ—Ä–µ –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)')


@dp.message_handler(state=FillingContract.price)
async def filling_step_3(message: types.Message, state: FSMContext):
    price = message.text.replace(',', '.')
    if not price.replace('.', '').isdigit():
        await message.answer('–£–∫–∞–∂–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        return
    await state.update_data(price=price)
    await FillingContract.next()
    await message.answer('–ö–∞–∫–æ–π –±—É–¥–µ—Ç –∞–≤–∞–Ω—Å –≤ %, –µ—Å–ª–∏ –±–µ–∑ –∞–≤–∞–Ω—Å–∞, —Ç–æ –Ω–∞–ø–∏—à–∏ 100')


@dp.message_handler(state=FillingContract.prepaid_expense)
async def filling_step_4(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏ –∞–≤–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        return
    if int(message.text) > 100:
        await message.answer('–ê–≤–∞–Ω—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100')
        return
    if message.text != '100':
        async with state.proxy() as data:
            data['name_file'] += 'a'
    await state.update_data(prepaid=message.text)
    await FillingContract.next()
    await message.answer('–ö–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç –≤ –¥–Ω—è—Ö?')


@dp.message_handler(state=FillingContract.period)
async def filling_step_5(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')
        return
    await state.update_data(period=message.text)
    await FillingContract.next()
    await message.answer('–ù–∞–ø–∏—à–∏ –ë–ò–ö –±–∞–Ω–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞')


@dp.message_handler(state=FillingContract.bik)
async def filling_step_6(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ë–ò–ö')
        return

    api_bik = work_with_api.parse_answer_bik(message.text)
    if not api_bik:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –ë–ò–ö. –£–∫–∞–∂–∏ –≤–µ—Ä–Ω—ã–π')
        return
    analytics.insert_data('request_bik')
    await state.update_data(bik=message.text)
    await state.update_data(api_bik=api_bik)
    await FillingContract.next()
    await message.answer('–í–µ—Ä–Ω–æ —É–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞')


@dp.message_handler(state=FillingContract.current_account)
async def filling_step_7(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or len(message.text) != 20:
        await message.answer('–í–∏–¥–∏–º–æ –Ω–µ –≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–ª –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å –∏ –≤–≤–µ–¥–∏ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.')
        return
    data = await state.get_data()
    api_inn = data['api_inn']
    if api_inn[1] == '–ò–ü':
        name = api_inn[0]['name_ip']
    else:
        name = api_inn[0]['name_ip']
    api_bik = data['api_bik']
    await state.update_data(current_account=message.text)
    await FillingContract.next()
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n"
                         f"–ò–ù–ù: {data['inn']}\n"
                         f"{name}\n"
                         f"–ê–¥—Ä–µ—Å: {data['address']}\n"
                         f"–¶–µ–Ω–∞ —Ä—É–±.: {data['price']}\n"
                         f"–ê–≤–∞–Ω—Å: {data['prepaid']} %\n"
                         f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –¥–Ω–µ–π: {data['period']}\n"
                         f"–†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç: {message.text}\n"
                         f"–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç: {api_bik['number_account']}\n"
                         f"–ë–ò–ö: {data['bik']}\n"
                         f"–ë–∞–Ω–∫ {api_bik['name_bank']}\n"
                         f"–í—Å–µ –≤–µ—Ä–Ω–æ?", reply_markup=keyboards.yes_or_no)


@dp.message_handler(state=FillingContract.answer)
async def filling_step_8(message: types.Message, state: FSMContext):
    if message.text == '‚ùå–ù–µ—Ç':
        await FillingContract.inn.set()
        await message.answer('–í–≤–µ–¥–∏ –∏–Ω–Ω –∫–ª–∏–µ–Ω—Ç–∞', reply_markup=keyboards.key_cancel)
    else:
        data = await state.get_data()
        await message.answer('–Ø –Ω–∞—á–∞–ª —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ–≥–æ–≤–æ—Ä. –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª—å—à–µ 1 –º–∏–Ω—É—Ç—ã.',
                             reply_markup=types.ReplyKeyboardRemove())
        file_name = filling_contract(data, message.from_user.id)
        await state.finish()
        await asyncio.sleep(40)

        file = types.InputFile(file_name)
        await message.answer_document(document=file)
        analytics.insert_data('contract')

        await message.answer('–î–æ–≥–æ–≤–æ—Ä –≥–æ—Ç–æ–≤! –ß—Ç–æ –¥–∞–ª—å—à–µ?', reply_markup=keyboards.menu)
        db.update_number_account(message.from_user.id)
        os.remove(file_name)
